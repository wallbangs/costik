from aiogram import F, Router, types, Bot
from aiogram.filters.command import CommandStart
from aiogram.filters import Command
from keyboards.admin import admin_command
from database.db import DataBase
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import ADMIN_ID, VERIF_CHANNEL_ID
class Admin_States(StatesGroup):
    #give balance(–≤—ã–¥–∞—á–∞ –±–∞–ª–∞–Ω—Å–∞)
    
    get_userinfo = State()
    give_balance = State()
    
    #delete balance(—É–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞)

    get_userinfo_del = State()
    delete_balance = State()

    #mailing(—Ä–∞—Å—Å—ã–ª–∫–∞)

    mailing_text = State()
    
    #change referral
    input_ref = State()
    
    #user management
    demote_user_id = State()
    reset_user_id = State()


router = Router()


@router.message(F.from_user.id == ADMIN_ID, Command("admin"))
async def admin_panel(message: types.Message):
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=await admin_command())



@router.message(F.text == '/admin')
async def admin_handler(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        await state.clear()
        users_count = await DataBase.get_users()
        money_list = await DataBase.get_users()
        money_count = 0
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", reply_markup=await admin_command(), parse_mode="HTML")
    else:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞!",parse_mode="HTML")


@router.callback_query(F.data == 'stat')
async def statistics_handler(callback: types.CallbackQuery):
    users_count = await DataBase.get_users_count()
    verified_count = await DataBase.get_verified_users_count()
    statistics_message = (
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n"
        f"üîπ <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{users_count}</code>\n"
        f"üîπ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ—à–µ–¥—à–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é:</b> <code>{verified_count}</code>"
    )
    await callback.message.answer(statistics_message, parse_mode="HTML")


@router.callback_query(F.data == 'mailing')
async def mailing_state(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    await state.set_state(Admin_States.mailing_text)


@router.message(Admin_States.mailing_text)
async def mailing_state(message: types.Message, state: FSMContext, bot: Bot):
    mailing_message = message.message_id
    ikb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='send_mailing'), types.InlineKeyboardButton(
            text='–û—Ç–º–µ–Ω–∞', callback_data='decline_mailing')]
    ])
    await bot.copy_message(chat_id=message.chat.id, from_chat_id=message.chat.id,
                           message_id=mailing_message, reply_markup=ikb, parse_mode="HTML")

    await state.update_data(msg=mailing_message)


@router.callback_query(F.data == 'send_mailing')
async def mailing_handler(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    errors_count = 0
    good_count = 0
    data = await state.get_data()
    mailing_message = data['msg']
    users = await DataBase.get_users()
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...")
    for i in users:
        try:
            await bot.copy_message(chat_id=i[1], from_chat_id=callback.from_user.id,
                                   message_id=mailing_message, parse_mode="HTML")
            good_count += 1
        except Exception as ex:
            errors_count += 1
            print(ex)

    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer(f"<b>–ö–æ–ª-–≤–æ –æ—Ç–æ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:</b> <code>{good_count}</code>\n\
<b>–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞:</b> <code>{errors_count}</code>", parse_mode="HTML")
    await callback.answer()
    await state.clear()


@router.callback_query(F.data == 'decline_mailing')
async def decline_mailing(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=await admin_command())
    await state.clear()


@router.callback_query(F.data == 'verificate')
async def verificate_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
    await state.set_state(Admin_States.get_userinfo)


@router.message(Admin_States.get_userinfo)
async def get_user_for_verification(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        user_info = await DataBase.get_user_info(user_id)
        if user_info:
            await DataBase.set_verification(user_id)
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!", reply_markup=await admin_command())
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!", reply_markup=await admin_command())
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", reply_markup=await admin_command())
    await state.clear()


@router.callback_query(F.data == "change_ref")
async def change_referral_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id == ADMIN_ID:
        try:
            await callback.message.delete()
        except:
            pass
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É:")
        await state.set_state(Admin_States.input_ref)
    else:
        await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!", show_alert=True)


@router.message(Admin_States.input_ref)
async def change_referral_message_state(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!", reply_markup=await admin_command())
        await DataBase.edit_ref(message.text)
    await state.clear()


@router.callback_query(F.data == 'demote_user')
async def demote_user_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–æ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ:")
    await state.set_state(Admin_States.demote_user_id)


@router.message(Admin_States.demote_user_id)
async def demote_user_by_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        user_info = await DataBase.get_user_info(user_id)
        if user_info:
            # Reset user to unregistered state
            await DataBase.set_verification(user_id, "unreg")
            await DataBase.update_deposit_status(user_id, "nedep")
            
            # Send notification to user that they've been demoted
            try:
                lang = await DataBase.get_lang(user_id)
                if lang:
                    await message.bot.send_message(
                        chat_id=user_id,
                        text="‚ö†Ô∏è –í–∞—à —Å—Ç–∞—Ç—É—Å –±—ã–ª —Å–±—Ä–æ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ."
                    )
            except Exception as e:
                print(f"Could not notify user {user_id}: {e}")
            
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–±—Ä–æ—à–µ–Ω –¥–æ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è!", reply_markup=await admin_command())
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!", reply_markup=await admin_command())
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", reply_markup=await admin_command())
    await state.clear()


@router.callback_query(F.data == 'reset_user')
async def reset_user_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã:")
    await state.set_state(Admin_States.reset_user_id)


@router.message(Admin_States.reset_user_id)
async def reset_user_by_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        user_info = await DataBase.get_user_info(user_id)
        if user_info:
            # Delete user completely from database
            await DataBase.delete_user(user_id)
            
            # Send notification to user that they've been removed
            try:
                lang = await DataBase.get_lang(user_id)
                if lang:
                    await message.bot.send_message(
                        chat_id=user_id,
                        text="‚ö†Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
                    )
            except Exception as e:
                print(f"Could not notify user {user_id}: {e}")
            
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!", reply_markup=await admin_command())
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!", reply_markup=await admin_command())
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", reply_markup=await admin_command())
    await state.clear()